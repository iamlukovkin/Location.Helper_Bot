import telebot as tb
from telebot import types
import operations as op
import windows_menu as menu


bot = tb.TeleBot(TOKEN)


@bot.message_handler(commands=['start'])
def start(message):
    markup = types.InlineKeyboardMarkup(row_width=1)
    i1 = types.InlineKeyboardButton(text='–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', callback_data='main')
    markup.add(i1)
    bot.send_message(message.chat.id,
                     f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!\n–¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –Ω–∞ '
                     f'–≥–ª–∞–≤–Ω–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ –±–æ—Ç–∞ –õ–æ–∫–∞—Ü–∏—è.–ü–æ–º–æ—â–Ω–∏–∫üìç\n–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ '
                     f'—É–ø—Ä–æ—Å—Ç–∏—Ç—å —Ä–∞–±–æ—Ç—É –≤ —Å–º–µ–Ω–µ.\n'
                     f'–ï—Å–ª–∏ —Ç—ã —Ç–æ–ª—å–∫–æ –Ω–∞—á–∏–Ω–∞–µ—à—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤—ã–±—Ä–∞—Ç—å –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è'
                     f'–ï—Å–ª–∏ —Ç—ã —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞–ª—Å—è –±–æ—Ç–æ–º, –º–æ–∂–µ—à—å –ø–µ—Ä–µ–π—Ç–∏ –≤ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=markup)
    reply_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    i = types.KeyboardButton('–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é')
    reply_markup.add(i)
    bot.send_message(message.chat.id, text='–¢—ã –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç –º–æ–∂–µ—à—å –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –Ω–∞—á–∞–ª–æ.\n'
                                           '–î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –Ω–∞–∂–∞—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É\n'
                                           '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –≤–Ω–∏–∑—É', reply_markup=reply_markup)


@bot.callback_query_handler(func=lambda call: True)
def logic_program(call):
    if call.data == 'reg':
        bot.send_message(call.message.chat.id, 'reg')
    elif call.data == 'main':
        menu.main(bot, call.message)
    else:
        if call.data == 'person':
            menu.person(bot, call.message)
        if call.data == 'library':
            menu.library(bot, call.message)
        else:
            if call.data == 'squad_info':
                op.squad_info(call.message)
            elif call.data == 'pers_notes':
                menu.notes(bot, call.message)
            elif call.data == 'methods':
                menu.methods(bot, call.message)
            elif call.data == 'diary':
                menu.diary(bot, call.message)
            elif call.data == 'messanger':
                menu.messenger(bot, call.message)
            else:
                if call.data == 'new_note':
                    op.new_note(call.message)
                elif call.data == 'last_note':
                    op.last_note(call.message)
                elif call.data == 'mess_from_friend':
                    op.messages_friend(call.message)
                elif call.data == 'new_doc':
                    op.new_doc(call.message)
                elif call.data == 'load_doc':
                    op.load_doc(call.message)
                elif call.data == 'pers_doc':
                    op.pers_doc(call.message)
                elif call.data == 'new_diary':
                    op.new_diary(call.message)
                elif call.data == 'comments_diary':
                    op.comments_diary(call.message)
                elif call.data == 'unreaded':
                    op.unreaded(call.message)
                elif call.data == 'readed':
                    op.readed(call.message)


@bot.message_handler(content_types=['text'])
def answer_text(message):
    if message.text == '–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é':
        menu.main(bot, message)


if __name__ == '__main__':
    bot.polling(none_stop=True)
